// Mocks generated by Mockito 5.4.4 from annotations
// in elevate_ecommerce_driver/test/features/login/presentation/cubit/login_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:elevate_ecommerce_driver/core/common/result.dart' as _i4;
import 'package:elevate_ecommerce_driver/features/login/data/models/response/login_response.dart'
    as _i5;
import 'package:elevate_ecommerce_driver/features/login/domain/models/user.dart'
    as _i8;
import 'package:elevate_ecommerce_driver/features/login/domain/usecases/check_cached_user_use_case.dart'
    as _i9;
import 'package:elevate_ecommerce_driver/features/login/domain/usecases/get_cached_user_use_case.dart'
    as _i10;
import 'package:elevate_ecommerce_driver/features/login/domain/usecases/get_user_data_use_case.dart'
    as _i11;
import 'package:elevate_ecommerce_driver/features/login/domain/usecases/login_use_case.dart'
    as _i2;
import 'package:elevate_ecommerce_driver/features/login/domain/usecases/set_cached_user_use_case.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i2.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.LoginResponse?>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.LoginResponse?>>.value(
            _i6.dummyValue<_i4.Result<_i5.LoginResponse?>>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.LoginResponse?>>);
}

/// A class which mocks [SetCachedUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetCachedUserUseCase extends _i1.Mock
    implements _i7.SetCachedUserUseCase {
  MockSetCachedUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<bool?>> setUser(
    _i8.User? user,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUser,
          [
            user,
            token,
          ],
        ),
        returnValue: _i3.Future<_i4.Result<bool?>>.value(
            _i6.dummyValue<_i4.Result<bool?>>(
          this,
          Invocation.method(
            #setUser,
            [
              user,
              token,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool?>>);
}

/// A class which mocks [CheckCachedUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckCachedUserUseCase extends _i1.Mock
    implements _i9.CheckCachedUserUseCase {
  MockCheckCachedUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<String?>> checkUser() => (super.noSuchMethod(
        Invocation.method(
          #checkUser,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<String?>>.value(
            _i6.dummyValue<_i4.Result<String?>>(
          this,
          Invocation.method(
            #checkUser,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<String?>>);
}

/// A class which mocks [GetCachedUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCachedUserUseCase extends _i1.Mock
    implements _i10.GetCachedUserUseCase {
  MockGetCachedUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i8.User?>> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i8.User?>>.value(
            _i6.dummyValue<_i4.Result<_i8.User?>>(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i8.User?>>);
}

/// A class which mocks [GetUserDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserDataUseCase extends _i1.Mock
    implements _i11.GetUserDataUseCase {
  MockGetUserDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i8.User>> getUserData() => (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i8.User>>.value(
            _i6.dummyValue<_i4.Result<_i8.User>>(
          this,
          Invocation.method(
            #getUserData,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i8.User>>);
}
