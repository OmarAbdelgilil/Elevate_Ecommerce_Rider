// Mocks generated by Mockito 5.4.5 from annotations
// in elevate_ecommerce_driver/test/features/home/data/repositories/home_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:elevate_ecommerce_driver/core/common/result.dart' as _i4;
import 'package:elevate_ecommerce_driver/features/home/data/contracts/offline_data_source.dart'
    as _i7;
import 'package:elevate_ecommerce_driver/features/home/data/contracts/online_data_source.dart'
    as _i2;
import 'package:elevate_ecommerce_driver/features/home/domain/models/orders/order_entity.dart'
    as _i8;
import 'package:elevate_ecommerce_driver/features/home/domain/models/orders/orders_entity.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [OnlineDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnlineDataSource extends _i1.Mock implements _i2.OnlineDataSource {
  MockOnlineDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.OrdersEntity>> getOrders() => (super.noSuchMethod(
        Invocation.method(
          #getOrders,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.OrdersEntity>>.value(
            _i6.dummyValue<_i4.Result<_i5.OrdersEntity>>(
          this,
          Invocation.method(
            #getOrders,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.OrdersEntity>>);
}

/// A class which mocks [OfflineDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineDataSource extends _i1.Mock implements _i7.OfflineDataSource {
  MockOfflineDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<bool>> setOngoingOrder(_i8.OrderEntity? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #setOngoingOrder,
          [order],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #setOngoingOrder,
            [order],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);

  @override
  _i3.Future<_i4.Result<bool>> clearOngoingOrder() => (super.noSuchMethod(
        Invocation.method(
          #clearOngoingOrder,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #clearOngoingOrder,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);

  @override
  _i3.Future<_i4.Result<bool>> checkOngoingOrder() => (super.noSuchMethod(
        Invocation.method(
          #checkOngoingOrder,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #checkOngoingOrder,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);

  @override
  _i3.Future<_i4.Result<_i8.OrderEntity>> getOngoingOrder() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOngoingOrder,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i8.OrderEntity>>.value(
            _i6.dummyValue<_i4.Result<_i8.OrderEntity>>(
          this,
          Invocation.method(
            #getOngoingOrder,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i8.OrderEntity>>);
}
