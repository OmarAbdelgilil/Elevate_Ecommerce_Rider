// Mocks generated by Mockito 5.4.4 from annotations
// in elevate_ecommerce_driver/test/features/home/presentation/viewmodels/home_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:elevate_ecommerce_driver/core/common/result.dart' as _i4;
import 'package:elevate_ecommerce_driver/features/home/data/models/response/firebase_orders_response.dart/firebase_orders_response.dart'
    as _i13;
import 'package:elevate_ecommerce_driver/features/home/data/models/response/start_order_response/start_order_response.dart'
    as _i11;
import 'package:elevate_ecommerce_driver/features/home/domain/models/orders/order_entity.dart'
    as _i9;
import 'package:elevate_ecommerce_driver/features/home/domain/models/orders/orders_entity.dart'
    as _i5;
import 'package:elevate_ecommerce_driver/features/home/domain/usecases/check_firebase_orders_use_case.dart'
    as _i12;
import 'package:elevate_ecommerce_driver/features/home/domain/usecases/check_order_use_case.dart'
    as _i7;
import 'package:elevate_ecommerce_driver/features/home/domain/usecases/get_pending_orders_use_case.dart'
    as _i2;
import 'package:elevate_ecommerce_driver/features/home/domain/usecases/set_order_use_case.dart'
    as _i8;
import 'package:elevate_ecommerce_driver/features/home/domain/usecases/start_order_use_case.dart'
    as _i10;
import 'package:elevate_ecommerce_driver/features/home/domain/usecases/update_firebase_order_data_use_case.dart'
    as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetPendingOrdersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPendingOrdersUseCase extends _i1.Mock
    implements _i2.GetPendingOrdersUseCase {
  MockGetPendingOrdersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.OrdersEntity>> getPendingOrders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingOrders,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.OrdersEntity>>.value(
            _i6.dummyValue<_i4.Result<_i5.OrdersEntity>>(
          this,
          Invocation.method(
            #getPendingOrders,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.OrdersEntity>>);
}

/// A class which mocks [CheckOrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckOrderUseCase extends _i1.Mock implements _i7.CheckOrderUseCase {
  MockCheckOrderUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<bool>> checkOngoingOrder() => (super.noSuchMethod(
        Invocation.method(
          #checkOngoingOrder,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #checkOngoingOrder,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);
}

/// A class which mocks [SetOrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetOrderUseCase extends _i1.Mock implements _i8.SetOrderUseCase {
  MockSetOrderUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<bool>> setOngoingOrder(_i9.OrderEntity? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #setOngoingOrder,
          [order],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #setOngoingOrder,
            [order],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);
}

/// A class which mocks [StartOrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartOrderUseCase extends _i1.Mock implements _i10.StartOrderUseCase {
  MockStartOrderUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i11.StartOrderResponse>> startOrder(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #startOrder,
          [orderId],
        ),
        returnValue: _i3.Future<_i4.Result<_i11.StartOrderResponse>>.value(
            _i6.dummyValue<_i4.Result<_i11.StartOrderResponse>>(
          this,
          Invocation.method(
            #startOrder,
            [orderId],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i11.StartOrderResponse>>);
}

/// A class which mocks [CheckFirebaseOrdersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckFirebaseOrdersUseCase extends _i1.Mock
    implements _i12.CheckFirebaseOrdersUseCase {
  MockCheckFirebaseOrdersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i13.FirebaseOrdersResponse>> getFirebaseOrders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFirebaseOrders,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i13.FirebaseOrdersResponse>>.value(
            _i6.dummyValue<_i4.Result<_i13.FirebaseOrdersResponse>>(
          this,
          Invocation.method(
            #getFirebaseOrders,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i13.FirebaseOrdersResponse>>);
}

/// A class which mocks [UpdateFirebaseOrderDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateFirebaseOrderDataUseCase extends _i1.Mock
    implements _i14.UpdateFirebaseOrderDataUseCase {
  MockUpdateFirebaseOrderDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<void>> updateOrderData(
    String? orderStatus,
    String? orderId, {
    String? driverDeviceToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrderData,
          [
            orderStatus,
            orderId,
          ],
          {#driverDeviceToken: driverDeviceToken},
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #updateOrderData,
            [
              orderStatus,
              orderId,
            ],
            {#driverDeviceToken: driverDeviceToken},
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);
}
